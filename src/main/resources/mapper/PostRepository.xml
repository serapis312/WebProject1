<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.project.childprj.repository.PostRepository">

    <insert id="save" flushCache="true" parameterType="com.project.childprj.domain.post.Post"
            useGeneratedKeys="true" keyColumn="id" keyProperty="id">
        INSERT INTO post
            (title, content, user_id)
        VALUES
            (#{title}, #{content}, #{user.id})
    </insert>

    <select id="findUserImage" resultType="com.project.childprj.domain.user.UserImage">
        SELECT
            id "id"
            , sourceName "sourceName"
            , fileName "fileName"
            , user_id "user_id"
        FROM user_img
        WHERE user_id = #{user_id}
    </select>

    <select id="findRecommend" resultType="com.project.childprj.domain.post.Recommend">
        SELECT
            post_id "post_id",
            user_id "user_id"
        FROM recommend
        WHERE post_id = #{post_id}
    </select>

    <insert id="addRecommend" flushCache="true">
        INSERT INTO recommend
            (user_id, post_id)
        VALUES
            (#{user_id}, #{post_id})
    </insert>

    <update id="incRecommendCnt" flushCache="true">
        UPDATE post
        SET recommendCnt = recommendCnt + 1
        WHERE id = #{id}
    </update>

    <select id="findRecommendCnt" resultType="int">
        SELECT count(*) FROM recommend
        WHERE post_id = #{post_id}
    </select>

    <update id="incViewCnt" flushCache="true">
        UPDATE post
        SET viewCnt = viewCnt + 1
        WHERE id = #{id}
    </update>

    <!-- 반복해서 사용될 쿼리문은 sql 태그로 정의 하고, include 태그로 가져다 쓸수 있다 -->
    <sql id="SELECT_BASE">
        SELECT
            p.id "p_id",
            p.title "p_title",
            p.content "p_content",
            p.viewcnt "p_viewCnt",
            p.recommendcnt "p_recommendCnt",
            p.createDate "p_createDate",
            u.id "u_id",
            u.username "u_username",
            u.nickname "u_nickname",
            u.name "u_name",
            u.email "u_email",
            u.regdate "u_regDate"
        FROM
            post p INNER JOIN user u
        ON
            p.user_id = u.id
    </sql>

    <resultMap id="mapUser" type="com.project.childprj.domain.user.User">
        <result column="u_id" property="id"/>
        <result column="u_username" property="username"/>
        <result column="u_nickname" property="nickname"/>
        <result column="u_name" property="name"/>
        <result column="u_email" property="email"/>
        <result column="u_regDate" property="regDate"/>
    </resultMap>

    <resultMap id="mapPost" type="com.project.childprj.domain.post.Post">
        <result column="p_id" property="id"/>
        <result column="p_title" property="title"/>
        <result column="p_content" property="content"/>
        <result column="p_viewCnt" property="viewCnt"/>
        <result column="p_recommendCnt" property="recommendCnt"/>
        <result column="p_createDate" property="createDate"/>
        <collection property="user" resultMap="mapUser"/>
    </resultMap>

    <select id="findById" resultMap="mapPost">
        <include refid="SELECT_BASE"/>
        WHERE p.id = #{id}
    </select>

    <select id="findAll" resultMap="mapPost">
        <include refid="SELECT_BASE"/>
        ORDER BY p.id DESC
    </select>

    <update id="update" flushCache="true"
            parameterType="com.project.childprj.domain.post.Post">
        UPDATE post
        SET title = #{title}, content = #{content}
        WHERE id = #{id}
    </update>

    <delete id="delete" flushCache="true"
            parameterType="com.project.childprj.domain.post.Post">
        DELETE FROM post WHERE id = #{id}
    </delete>

    <!-- 페이징 용 쿼리 -->
    <select id="selectFromRow" resultMap="mapPost">
        <include refid="SELECT_BASE"/>
        ORDER BY p.id DESC
        LIMIT #{param1}, #{param2}
    </select>

    <select id="countAll" resultType="int">
        SELECT count(*) FROM post
    </select>

    <!-- 정렬순, 검색 목록용 쿼리 -->
    <!-- 추천순 정렬만 -->
    <select id="selectByRecommend" resultMap="mapPost">
        <include refid="SELECT_BASE"/>
        ORDER BY recommendCnt DESC, p.id DESC
        LIMIT #{param1}, #{param2}
    </select>
    <!-- 추천순 정렬과 검색 -->
    <select id="selectByRecommendAndSearch" resultMap="mapPost">
        <include refid="SELECT_BASE"/>
        WHERE p.title like CONCAT('%',#{param3},'%')
        OR u.nickname like CONCAT('%',#{param4},'%')
        ORDER BY recommendCnt DESC, p.id DESC
        LIMIT #{param1}, #{param2}
    </select>
    <!-- 최신순 정렬만 -->
    <select id="selectByNewer" resultMap="mapPost">
        <include refid="SELECT_BASE"/>
        ORDER BY p.id DESC
        LIMIT #{param1}, #{param2}
    </select>
    <!-- 최신순 정렬과 검색 -->
    <select id="selectByNewerAndSearch" resultMap="mapPost">
        <include refid="SELECT_BASE"/>
        WHERE p.title like CONCAT('%',#{param3},'%')
        OR u.nickname like CONCAT('%',#{param4},'%')
        ORDER BY p.id DESC
        LIMIT #{param1}, #{param2}
    </select>
    <!-- 검색 결과 총 개수 -->
    <select id="countAllWhenSearch" resultType="int">
        SELECT count(*)
        FROM post p INNER JOIN user u
        ON p.user_id = u.id
        WHERE p.title LIKE CONCAT('%',#{param1},'%')
        OR u.nickname like CONCAT('%',#{param2},'%')
    </select>

    <!-- 첨부파일 용 쿼리 -->

    <insert id="saveImage" flushCache="true" parameterType="com.project.childprj.domain.post.Attachment">
        INSERT INTO post_img(sourceName, fileName, post_id)
        VALUES
        (#{sourceName}, #{fileName}, #{post_id})
    </insert>

    <!-- 반복해서 사용될 쿼리문은 sql 태그로 정의 include 태그로 가져다 쓸수 있다 -->
    <sql id="SELECTFILE">
        SELECT id, sourceName, fileName, post_id
        FROM post_img
        WHERE 1 = 1
    </sql>

    <select id="findImageByPost" resultType="com.project.childprj.domain.post.Attachment">
        <include refid="SELECTFILE"/>
        AND
        post_id = #{param1}
        ORDER BY id ASC
    </select>

    <select id="findImageById" resultType="com.project.childprj.domain.post.Attachment">
        <include refid="SELECTFILE"/>
        AND id = #{id}
    </select>

    <delete id="deleteImage" flushCache="true">
        DELETE FROM post_img WHERE id = #{id}
    </delete>

    <!-- 댓글 용 쿼리 -->

    <resultMap id="mapComment" type="com.project.childprj.domain.post.Comment">
        <result column="c_id" property="id"/>
        <result column="c_content" property="content"/>
        <result column="c_createDate" property="createDate"/>
        <result column="c_post_id" property="post_id"/>
        <collection property="user" resultMap="mapUser"/>
        <collection property="userImage" resultMap="mapUserImage"/>
    </resultMap>

    <resultMap id="mapUserImage" type="com.project.childprj.domain.user.UserImage">
        <result column="i_id" property="id"/>
        <result column="i_fileName" property="fileName"/>
    </resultMap>

    <select id="findCommentByPost" resultMap="mapComment">
        SELECT
            c.id "c_id",
            c.content "c_content",
            c.createDate "c_createDate",
            c.post_id "c_post_id",
            u.id "u_id",
            u.username "u_username",
            u.nickname "u_nickname",
            u.name "u_name",
            u.email "u_email",
            u.regdate "u_regDate",
            i.id "i_id",
            i.fileName "i_fileName"
        FROM post_comment c, user u LEFT OUTER JOIN user_img i
        ON u.id = i.user_id
        WHERE
            c.user_id = u.id
        AND c.post_id = #{post_id}
        ORDER BY c.id DESC
    </select>

    <insert id="saveComment" flushCache="true"
            parameterType="com.project.childprj.domain.post.Comment"
            useGeneratedKeys="true" keyColumn="id" keyProperty="id">
        INSERT INTO post_comment(user_id, post_id, content)
        VALUES(#{user.id}, #{post_id}, #{content})
    </insert>

    <delete id="deleteCommentById" flushCache="true">
        DELETE FROM post_comment WHERE id = #{id}
    </delete>

</mapper>